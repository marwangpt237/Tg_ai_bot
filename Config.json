
# Replace the config loading section with this:

# --- CONFIGURATION ---
logging.basicConfig(
    level=logging.INFO, 
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# Try environment variables first, then config file
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
GEMINI_KEYS_STR = os.getenv('GEMINI_API_KEYS')
ADMIN_IDS_STR = os.getenv('ADMIN_IDS', '')

if BOT_TOKEN and GEMINI_KEYS_STR:
    # Use environment variables
    GEMINI_KEYS = GEMINI_KEYS_STR.split(',')
    ADMIN_IDS = [int(id.strip()) for id in ADMIN_IDS_STR.split(',') if id.strip().isdigit()]
    logging.info("Configuration loaded from environment variables")
else:
    # Fallback to config file
    try:
        with open("config.json", "r") as f: 
            config = json.load(f)
        BOT_TOKEN = config["TELEGRAM_BOT_TOKEN"]
        GEMINI_KEYS = config["GEMINI_API_KEYS"]
        ADMIN_IDS = config.get("ADMIN_IDS", [])
        logging.info("Configuration loaded from config.json")
    except (FileNotFoundError, KeyError) as e:
        logging.critical(f"FATAL: Error with configuration: {e}")
        logging.critical("Set environment variables: TELEGRAM_BOT_TOKEN, GEMINI_API_KEYS")
        exit()

# Update database paths for persistent storage
DB_FILE = "/app/data/bot_database.db" if os.getenv('RAILWAY_ENVIRONMENT') else "bot_database.db"
CACHE_FILE = "/app/data/response_cache.json" if os.getenv('RAILWAY_ENVIRONMENT') else "response_cache.json"
